diff --git a/content/browser/renderer_host/render_widget_host_view_mac.mm b/content/browser/renderer_host/render_widget_host_view_mac.mm
index 924c274..b6635c5 100644
--- a/content/browser/renderer_host/render_widget_host_view_mac.mm
+++ b/content/browser/renderer_host/render_widget_host_view_mac.mm
@@ -77,6 +77,7 @@
 #include "ui/gfx/geometry/size_conversions.h"
 #include "ui/gfx/scoped_ns_graphics_context_save_gstate_mac.h"
 #include "ui/gfx/screen.h"
+#include "ui/gl/gpu_switching_manager.h"
 #include "ui/gl/gl_switches.h"
 
 using content::BrowserAccessibility;
@@ -537,9 +538,11 @@ RenderWidgetHostViewMac::RenderWidgetHostViewMac(RenderWidgetHost* widget,
   // Paint this view host with |background_color_| when there is no content
   // ready to draw.
   background_layer_.reset([[CALayer alloc] init]);
+  if ([cocoa_view() isOpaque]) {
   base::ScopedCFTypeRef<CGColorRef> background(
       gfx::CGColorCreateFromSkColor(background_color_));
   [background_layer_ setBackgroundColor:background];
+  }
   [cocoa_view_ setLayer:background_layer_];
   [cocoa_view_ setWantsLayer:YES];
 
@@ -609,6 +612,9 @@ void RenderWidgetHostViewMac::EnsureBrowserCompositorView() {
     delegated_frame_host_->WasShown(ui::LatencyInfo());
     browser_compositor_state_ = BrowserCompositorActive;
   }
+
+  if (![cocoa_view() isOpaque])
+    root_layer_->GetCompositor()->SetHostHasTransparentBackground(true);
 }
 
 void RenderWidgetHostViewMac::SuspendBrowserCompositorView() {
@@ -1788,6 +1794,18 @@ void RenderWidgetHostViewMac::OnDisplayMetricsChanged(
 }
 
 - (BOOL)acceptsFirstMouse:(NSEvent*)theEvent {
+  const SEL selector = @selector(acceptsFirstMouse:);
+  if ([self.window.delegate respondsToSelector:selector]) {
+    NSInvocation* invocation = [NSInvocation
+        invocationWithMethodSignature:[[self.window.delegate class]
+            instanceMethodSignatureForSelector:selector]];
+    [invocation setTarget:self.window.delegate];
+    [invocation setSelector:selector];
+    [invocation invoke];
+    BOOL accept;
+    [invocation getReturnValue:&accept];
+    return accept;
+  }
   return [self acceptsMouseEventsWhenInactive];
 }
 
@@ -1911,6 +1929,7 @@ void RenderWidgetHostViewMac::OnDisplayMetricsChanged(
   if (EventIsReservedBySystem(theEvent))
     return NO;
 
+#if 0
   // If we return |NO| from this function, cocoa will send the key event to
   // the menu and only if the menu does not process the event to |keyDown:|. We
   // want to send the event to a renderer _before_ sending it to the menu, so
@@ -1924,6 +1943,7 @@ void RenderWidgetHostViewMac::OnDisplayMetricsChanged(
     DCHECK(![[NSApp mainMenu] performKeyEquivalent:theEvent]);
     return NO;
   }
+#endif
 
   // Command key combinations are sent via performKeyEquivalent rather than
   // keyDown:. We just forward this on and if WebCore doesn't want to handle
@@ -3366,7 +3386,10 @@ extern NSString *NSTextInputReplacementRangeAttributeName;
 }
 
 - (BOOL)isOpaque {
-  return YES;
+  if (self.window)
+    return [self.window isOpaque];
+  else
+    return !ui::GpuSwitchingManager::UseTransparent();
 }
 
 // "-webkit-app-region: drag | no-drag" is implemented on Mac by excluding
